%% Signal Analysis
%  A script version of the Signal Analysis GUI app. It allows users run the
%  automatic version of the code when the dataset is large on a HPC.
%
%  Author: Raymond Zhang
%  Created: 2023-08-07
%  Updated: 2023-08-22

close all; clc; clear;
addpath(genpath('utility'))

%% USERS INPUTS
disp('Reading user inputs');
FolderPath = 'C:\Users\rzha0171\Documents\GitHub\UROP\SampleData\CardiacCycle_full\';
FileNameNucCh = 'z005-Nuc.tif';
FileNameCaCh = 'z005-Ca.tif';
StartFrame = 1;
EndFrame = 0;
OutputFolder = 'CaSignalVsTime';
samplingRate = 25;  % exposure time millisecond
meanDist = 13.1351;    % frames per cycle
visibility = 'on'; % display figures or not
disp('User inputs read');


%% Initiation
disp('Processing user inputs');
[FilePaths, OutputPath, TifInfo, N_frames, N_channels, EndFrame] = initialise( ...
    FolderPath, FileNameNucCh, FileNameCaCh, StartFrame, EndFrame, OutputFolder);
disp('User inputs processed')


%% Get and save overlay
disp('Overlaying movie frames')
OverlayedNuc = overlay(FilePaths{1}, TifInfo, StartFrame, EndFrame, N_frames);
imwrite(OverlayedNuc, [OutputPath, filesep, 'OverlayedNuc.tif'], 'tif')
OverlayedCa = overlay(FilePaths{2}, TifInfo, StartFrame, EndFrame, N_frames);
imwrite(OverlayedCa, [OutputPath, filesep, 'OverlayedCa.tif'], 'tif')
OverlayedImages = {OverlayedNuc, OverlayedCa};
disp('Overlay complete')


%% Draw and create region of interest
disp('Creating region of interest')
NucOverlay = mat2gray(OverlayedImages{1});
CaOverlay = mat2gray(OverlayedImages{2});
fusedChannel = imfuse(CaOverlay, NucOverlay);
switch 'script'
    case 'app'
        imshow(fusedChannel)
        axis on;
        title('Do not close this figure window till end of script!', 'FontSize', 16);
        message = sprintf('Left click and hold to begin drawing.\nSimply lift the mouse button to finish');
        uiwait(msgbox(message));
        hFH = imfreehand();
        ROI_boundary = hFH.createMask();
        save("ROI_boundary.mat","ROI_boundary")
        close();
    case 'script'
        load("ROI_boundary.mat")
end
save_ROI(fusedChannel, ROI_boundary, OutputPath)
disp('Region of interest saved')


%% Calculate signal vs time
disp('Calculating intensity signal for ROI')
SignalNuc = calculate_signal(StartFrame,EndFrame,FilePaths{1},ROI_boundary);
SignalCa = calculate_signal(StartFrame,EndFrame,FilePaths{2},ROI_boundary);
disp('Signal intensity calculated')


%% Plot graph
disp('Plotting raw signal graph')

figure('Visible','on');
subplot(1,3,1)
hold on
plot(0:1:(N_frames-1)*1, SignalCa, 'g');
plot(0:1:(N_frames-1)*1, SignalNuc, 'm');
title('Raw signal - cycles')
xlabel('Time [cycles]');
ylabel('Signal Intensity');
legend('CaSignal','NucSignal')

subplot(1,3,2)
hold on
frame_scale = meanDist; % plot according to number of actual frames
plot(0:frame_scale:(N_frames-1)*frame_scale, SignalCa, 'g');
plot(0:frame_scale:(N_frames-1)*frame_scale, SignalNuc, 'm');
title('Raw signal - frames')
xlabel('Time [frames]');
ylabel('Signal Intensity');
legend('CaSignal','NucSignal')

subplot(1,3,3)
hold on
time_scale = meanDist*samplingRate/1000; % plot according to real time
plot(0:time_scale:(N_frames-1)*time_scale, SignalCa, 'g');
plot(0:time_scale:(N_frames-1)*time_scale, SignalNuc, 'm');
title('Raw signal - time')
xlabel('Time [s]');
ylabel('Signal Intensity');
legend('CaSignal','NucSignal')

imageName = fullfile(OutputPath,'Raw Calcium and Nuclear Signal');
saveas(gcf,imageName,'tiff');

disp('Raw signal graph plotted')

%% Normalise to background Ca level and Nuc
disp('Calculating and plotting normalised si')
Baseline = min(SignalCa./SignalNuc);
NormSignalByBackground = (SignalCa./SignalNuc - Baseline)/(Baseline);

figure('Visible','on');
subplot(1,3,1)
hold on
plot(0:1:(N_frames-1)*1, NormSignalByBackground, 'k');
title('Normalised calcium signal - cycles')
xlabel('Time [cycles]');
ylabel('Signal Intensity');

subplot(1,3,2)
hold on
frame_scale = meanDist; % plot according to number of actual frames
plot(0:frame_scale:(N_frames-1)*frame_scale, NormSignalByBackground, 'k');
title('Normalised calcium signal - frames')
xlabel('Time [frames]');
ylabel('Signal Intensity');

subplot(1,3,3)
hold on
time_scale = meanDist*samplingRate/1000; % plot according to real time
plot(0:time_scale:(N_frames-1)*time_scale, NormSignalByBackground, 'k');
title('Normalised calcium signal - time')
xlabel('Time [s]');
ylabel('Signal Intensity');

imageName = fullfile(OutputPath,'Normalised Calcium Signal');
saveas(gcf,imageName,'tiff');


%% Make graph movie
GraphMoviePath = [OutputPath,'\GraphMovie'];
mkdir(GraphMoviePath);

for i = 1:N_frames
    figure('Visible','off')
    time_scale = meanDist*samplingRate/1000; % plot according to real time
    plot(0:time_scale:(i-1)*time_scale, NormSignalByBackground(1:i), 'k');
    title('Normalised Calcium Signal')
    xlabel('Time [s]');
    ylabel('Signal Intensity');
    axis([0,N_frames*time_scale,0,max(NormSignalByBackground)]);
    iName = string(i);
    imageName = fullfile(GraphMoviePath,iName);
    saveas(gcf,imageName,'tiff');
end
close all;



% function for overlaying multiple signals???

%% Analysis
% Z = ct_pulseanalysis(NormSignalByBackground','TSAMP',14.4,'MAXW',5);
% 
% Ztime = Z;
% Ztime.pkpos = Ztime.pkpos * (meanDist * samplingRate);
% Ztime.mpos = Ztime.mpos * (meanDist * samplingRate);
% Ztime.rise = Ztime.rise * (meanDist * samplingRate);
% Ztime.fall = Ztime.fall * (meanDist * samplingRate);
% Ztime.dur = Ztime.dur * (meanDist * samplingRate);
% 
% figure
% plot(0:xaxisScale:(N-1)*xaxisScale, NormSignalByBackground, 'k');
% xlabel('time (ms)');
% ylabel('Normalised Calcium Signal');
% imageName = fullfile(folder_w,'Peak Positions');
% hold on
% 
% for i = 1:length(Z.pkpos)
%     line([Z.pkpos(i),Z.pkpos(i)],[0,0.5],'Color','r','LineWidth',1); 
% end
% text(Z.pkpos,Z.peak+0.02,num2str((1:numel(Z.pkpos))'),'Color','r') 

%saveas(gcf,imageName,'tiff');
